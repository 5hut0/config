#  _                                          __
# | |_ _ __ ___  _   ___  __  ___ ___  _ __  / _|
# | __| '_ ` _ \| | | \ \/ / / __/ _ \| '_ \| |_
# | |_| | | | | | |_| |>  < | (_| (_) | | | |  _|
#  \__|_| |_| |_|\__,_/_/\_(_)___\___/|_| |_|_|
#

# ------------------------------------------------------------------------------
# COLORS
#------------------------------------------------------------------------------
# 256色端末を使用する
set -g default-terminal "screen-256color"

# ステータスバーの色を設定する
set-option -g status-bg black #base02
set-option -g status-fg yellow #yellow
set-option -g status-attr default

set-window-option -g window-status-current-format "#[fg=black,bg=brightred] #I:#W #[default]"
set -g window-status-style 'bg=black,fg=brightblue'
set -g window-status-activity-style 'bg=yellow,fg=black,blink'
set -g window-status-bell-style 'bg=cyan,fg=black,blink'
set -g window-status-current-style 'bg=brightred,fg=black'

# ペインボーダーの色を設定する
set-option -g pane-border-fg black #base02
set-option -g pane-active-border-fg green #base01

# コマンドラインの色を設定する
set-option -g message-bg black #base02
set-option -g message-fg brightred #orange

# pane number display
set-option -g display-panes-active-colour blue #blue
set-option -g display-panes-colour brightred #orange

# clock
set-window-option -g clock-mode-colour green #green

# ステータスバーを設定する
set-option -g status-left-length 90
## 左パネルを設定する
set -g status-left "#[fg=red]#H: #[fg=green]#S "

## 右パネルを設定する
set -g status-right "#[fg=cyan][%Y/%m/%d(%a) %H:%M]"


#---------------------------------------------------------------------------}}}
# Unbind all keys & default key settings                                    {{{
#------------------------------------------------------------------------------

# unbind-key -a

# default key-bindings {{{
#======================#
bind-key C-z suspend-client
bind-key ! break-pane
bind-key '#' list-buffers
bind-key '$' command-prompt "rename-session '%%'"
bind-key , command-prompt "rename-window '%%'"
bind-key - delete-buffer
bind-key . command-prompt "move-window -t '%%'"
bind-key : command-prompt
bind-key \; last-pane
bind-key = choose-buffer
bind-key ? list-keys
bind-key D choose-client
bind-key L switch-client -l
bind-key [ copy-mode
bind-key ] paste-buffer
bind-key d detach-client
bind-key f command-prompt "find-window '%%'"
bind-key i display-message
bind-key q display-panes
bind-key s choose-session
bind-key w choose-window
bind-key "~" show-messages
bind-key PPage copy-mode -u
bind-key -r M-1 select-layout even-horizontal
bind-key -r M-2 select-layout even-vertical
bind-key -r M-3 select-layout main-horizontal
bind-key -r M-4 select-layout main-vertical
bind-key -r M-5 select-layout tiled
# }}}

#---------------------------------------------------------------------------}}}
# Keybind (normal mode)                                                     {{{
#------------------------------------------------------------------------------

# prefix key ^b -> ^g
set -g prefix C-g
bind-key C-g send-prefix

# vi like key binding
setw -g mode-keys vi
# bind-key -t vi-copy v begin-selection

# if session has > 1 windows in current, kill-pane without confirmation.
# But confirm before killing pane when it is the last pane in the window.
bind-key -n M-c if "tmux display -p \"#{window_panes}\" | grep ^1\$" \
    "confirm-before -p \"Kill the only pane in the window? It will kill this window too. (y/n)\" kill-pane" \
    "kill-pane"

# if session has > 1 windows in current, kill-window without confirmation.
# But confirm before killing window when it is the last window in the session.
bind-key -n M-C if "tmux display -p \"#{session_windows}\" | grep ^1\$"\
    "confirm-before -p \"Kill the only window in this session? It will kill the session too. (y/n)\" kill-window" \
    "kill-window"

# split window (easily remember)
bind-key -n M-- split-window -v -c "#{pane_current_path}"
bind-key -n M-| split-window -h -c "#{pane_current_path}"

# vim like
bind-key s split-window -v -c "#{pane_current_path}"
bind-key v split-window -h -c "#{pane_current_path}"

# move between panes
bind-key -n M-h select-pane -L
bind-key -n M-j select-pane -D
bind-key -n M-k select-pane -U
bind-key -n M-l select-pane -R
bind-key -n M-Down select-pane -t :.+
bind-key -n M-Up select-pane -t :.-

# select the master pane
bind-key -n M-m select-pane -t :.1

# swap pane
bind-key -n M-J swap-pane -D
bind-key -n M-K swap-pane -U

# move the pane to the master pane
bind-key -n M-M swap-pane -d -t :.1

# resize panes (xmonad like)
bind-key -n M-',' resize-pane -L 1
bind-key -n M-z resize-pane -D 1
bind-key -n M-a resize-pane -U 1
bind-key -n M-'.' resize-pane -R 1

# maximize pane ("f"ull screen)
bind-key -n M-f resize-pane -Z

# display-panes
bind-key -n M-q display-panes

# move between window
bind-key -n M-Right next-window
bind-key -n M-Left previous-window

# swap window
bind-key -n M-L swap-window -t :+
bind-key -n M-H swap-window -t :-

# next layout
bind-key -n M-Space next-layout

# switch windows Alt+number
bind-key -n M-1 select-window -t 1
bind-key -n M-2 select-window -t 2
bind-key -n M-3 select-window -t 3
bind-key -n M-4 select-window -t 4
bind-key -n M-5 select-window -t 5
bind-key -n M-6 select-window -t 6
bind-key -n M-7 select-window -t 7
bind-key -n M-8 select-window -t 8
bind-key -n M-9 select-window -t 9

# select-window by name typing
bind-key W command-prompt "select-window -t '%%'"

# create new window
bind-key -n M-Enter new-window -c "#{pane_current_path}"

# choose-tree
# bind-key t choose-tree

# Capture pane and open in Vim
bind-key C-c run 'tmux capture-pane -S -10240 -p > /tmp/tmux-capture.txt'\;\
             new-window "vim + /tmp/tmux-capture.txt"


# ^b + r => reload config file
bind-key r source-file ~/.tmux.conf \; display "Reloaded!"

#---------------------------------------------------------------------------}}}
# Keybind (copy mode)                                                       {{{
#------------------------------------------------------------------------------

# v: select start with v (default Space)
# bind-key -t vi-copy v begin-selection

# V: select line
# bind-key -t vi-copy V select-line

# C-v: select rectangular
# bind-key -t vi-copy C-v rectangle-toggle

# y: yank
# bind-key -t vi-copy y copy-selection

# Y: yank line
# bind-key -t vi-copy Y copy-line

#------------------------------------------------------------------------------
# GENERAL
#------------------------------------------------------------------------------

# max history limit
set -g history-limit 5000

# escape time
set -s escape-time 0

# Set the time in milliseconds for which the indicators shown by the
# display-pane command appear.
set -g display-panes-time 3000

# count windows stating with 1 instead of 0
set -g base-index 1
set -g pane-base-index 1

# renumber the windows
set -g renumber-windows on

# Automatically set window title
setw -g automatic-rename on

# フォーカスイベントを発生させる(vim用)
set -g focus-events on

## リフレッシュの間隔を設定する(デフォルト 15秒)
set -g status-interval 60

## ウィンドウリストの位置を左寄せにする
set -g status-justify left

## ヴィジュアルノーティフィケーションを有効にする
setw -g monitor-activity on
set -g visual-activity on

## ステータスバーを上部に表示する
set -g status-position top

# マウス操作を有効にする
set-option -g mouse on

#------------------------------------------------------------------------------
# Clipboard
#------------------------------------------------------------------------------
# Mac OS X pasteboardを使用できるようにする
set-option -g default-command "reattach-to-user-namespace -l fish"

# コピーモードでvimキーバインドを使う
setw -g mode-keys vi

# 'v' で選択を始める
# bind-key -t vi-copy v begin-selection
# bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# `Enter` でもcopy-pipeを使う
# unbind -t vi-copy Enter
# bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

# ']' でpbpasteを使う
bind ] run "reattach-to-user-namespace pbpaste | tmux load-buffer - && tmux paste-buffer"

